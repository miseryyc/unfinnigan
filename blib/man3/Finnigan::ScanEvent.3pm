.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Finnigan::ScanEvent 3pm"
.TH Finnigan::ScanEvent 3pm "2011-06-20" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Finnigan::ScanEvent \-\- a decoder for ScanEvent, a detailed scan descriptor
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  use Finnigan;
\&  my $e = Finnigan::ScanEvent\->decode(\e*INPUT);
\&  say $e\->size;
\&  say $e\->dump;
\&  say join(" ", $e\->preamble\->list(decode => \*(Aqyes\*(Aq));
\&  say $e\->preamble\->analyzer(decode => \*(Aqyes\*(Aq);
\&  $e\->fraction_collector\->dump;
\&  $e\->reaction\->dump if $e\->preamble\->ms_power > 1 # Reaction will not be present in MS1
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a variable-layout (but otherwise static) structure, contaning
several key details about the scan. Most of those details are
concentrated in its head element, ScanEventPreamble.
.PP
The layout depends on the number of precursor ions and is governed by
the attribute named 'np'. The value np = 0 corresponds to an \s-1MS1\s0 scan.
.PP
All variants contain a structure named FractionCollector, which is
just a pair of double-precision numbers indicating the M/z range of
the scan.
.PP
In addition to some unknowns that occur in all variants, the \s-1MS1\s0
variant (np = 0) contains a copy of all conversion coefficients that
determine the transformation of the spectra from the frequency domain
to M/z (the other copy of the same coefficients is stored in the
corresponding ScanParameterSet \*(-- a somewhat overlapping structure in
a parallel stream).
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.ie n .IP "decode($stream, $version)" 4
.el .IP "decode($stream, \f(CW$version\fR)" 4
.IX Item "decode($stream, $version)"
The constructor method
.IP "purge_unused_data" 4
.IX Item "purge_unused_data"
Delete the location, size and type data for all structure
elements. Calling this method will free some memory when no
introspection is needeed (the necessary measure in production-grade
code)
.IP "np" 4
.IX Item "np"
Get the number of precursor ions
.IP "preamble" 4
.IX Item "preamble"
Get the Finnigan::ScanEventPreamble object
.IP "fraction_collector" 4
.IX Item "fraction_collector"
Get the Finnigan::FractionCollector object
.IP "precursors" 4
.IX Item "precursors"
Get the list full list of precursor descriptors Finnican::Reaction objects
.IP "reaction($n)" 4
.IX Item "reaction($n)"
Get the precursor number n (a Finnigan::Reaction object). In the absence of the number argument, it returns the first precursor.
.IP "nparam" 4
.IX Item "nparam"
Get the number of conversion coefficients
.IP "unknown_double" 4
.IX Item "unknown_double"
Get the value of the unknown first coefficient (0 in all known cases)
.IP "I" 4
.IX Item "I"
Get the value of the coefficient I (0 in all known cases, Orbitrap data only)
.IP "A" 4
.IX Item "A"
Get the value of the coefficient A (0 in all known cases)
.IP "B" 4
.IX Item "B"
Get the value of the coefficient B (LTQ-FT, Orbitrap)
.IP "C" 4
.IX Item "C"
Get the value of the coefficient C (LTQ-FT, Orbitrap)
.IP "D" 4
.IX Item "D"
Get the value of the coefficient D (Orbitrap only)
.IP "E" 4
.IX Item "E"
Get the value of the coefficient E (Orbitrap only)
.IP "converter" 4
.IX Item "converter"
Returns the pointer to the function for the forward conversion f a\*^XX M/z
.IP "inverse_converter" 4
.IX Item "inverse_converter"
Returns the pointer to the function for the inverse conversion M/z a\*^XX f
.IP "stringify" 4
.IX Item "stringify"
Make a short text representation of the object
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Finnigan::ScanEventPreamble
.PP
Finnigan::FractionCollector
.PP
Finnigan::Reaction
.PP
uf-trailer
.SH "AUTHOR"
.IX Header "AUTHOR"
Gene Selkov, <selkovjr@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2010 by Gene Selkov
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.0 or,
at your option, any later version of Perl 5 you may have available.
